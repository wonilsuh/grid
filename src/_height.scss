/* Heights */

.ibm-height-strict {
  max-height: 0;
}

$height-scale:(
  1, 2, 3, 4, 6, 8
);

$prev-padding:0;
$prev-breakpoint:null;
$prev-values:null;

@each $breakpoint, $values in $ibm-grid {

  @media (min-width:map-get($values, 'breakpoint')) {

    @if $breakpoint != $breakpoint-max {
      .ibm-height-#{$breakpoint}-0 {
        min-height:unset;
      }
      .ibm-s-height-#{$breakpoint}-0 {
        min-height:unset;
      }
    }

    /* Small heights */
    @if $prev-padding != map-get($values, 'padding') and $breakpoint != $breakpoint-max{
      // $prev-padding: map-get($values, 'padding');
      @each $factor in $height-scale{
        .ibm-s-height-#{$breakpoint}-#{$factor} { 
          min-height: #{$factor * map-get($values, 'padding') * 0.5};
        }
      }
    }

    @each $breakpoint2, $values2 in $ibm-grid {

      @if map-get($values2, 'breakpoint') <= map-get($values, 'breakpoint') {

        @if $breakpoint2 != $breakpoint-max {

          $values-max: map-get($ibm-grid, $breakpoint-max);
          $values-min: map-get($ibm-grid, $breakpoint-min);
          $a:1;
          @while $a <= map-get($values2, 'columns') {

            .ibm-height-#{$breakpoint2}-#{$a} {

              $padding: get-padding($values, 1);
              $subtractor: $padding * map-get($values, 'margin') * 2;

              @if $breakpoint == $breakpoint-max {
                $values-max:map-get($ibm-grid, $breakpoint-max);
                min-height: #{(map-get($values-max, 'breakpoint') - map-get($values-max, 'padding') *2 ) / map-get($values2, 'columns') * $a };
              } @else {
                @if $subtractor > 0 {
                  min-height: calc( (100vw - #{$subtractor}) * #{$a / map-get($values2, 'columns')} );
                } @else {
                  min-height: calc( 100vw * #{$a / map-get($values2, 'columns')});
                }
              }
            }

            $a: $a + 1;
          }
        }
      }
    }
  }

  $prev-breakpoint:$breakpoint;
  $prev-values:$values;
}