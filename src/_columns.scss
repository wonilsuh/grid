/*-----------------------------------------------------
 *	columns and heights
 */

$height-scale:(
  1, 2, 3, 4, 6, 8
);

.ibm-height-strict {
  max-height: 0;
}

$prev-padding:0;

@each $breakpoint, $values in $ibm-grid {
	
	@if $breakpoint != $breakpoint-max {

		@media (min-width:#{map-get($values, 'breakpoint')}) {

			@if $prev-padding != map-get($values, 'padding'){
				// $prev-padding: map-get($values, 'padding');
				@each $factor in $height-scale{
					.ibm-s-height-#{$breakpoint}-#{$factor} { 
						min-height: #{$factor * map-get($values, 'padding') * 0.5};
					}
				}
			}

			@each $breakpoint2, $values2 in $ibm-grid {

				@if map-get($values2, 'breakpoint') <= map-get($values, 'breakpoint') {

					@each $breakpoint3, $values3 in $ibm-grid {

						@if map-get($values3, 'breakpoint') > map-get($values2, 'breakpoint')
							and map-get($values3, 'breakpoint') == map-get($values, 'breakpoint') {

							[class*="ibm-col-#{$breakpoint3}-"].ibm-col-#{$breakpoint2}-0 {
								display: initial; 

								&.ibm-col-group {
									display: flex;
								}
							}
						}
					}

					.ibm-col-#{$breakpoint2}-0 {
						display: none;
					}

					$values-max: map-get($ibm-grid, $breakpoint-max);
					$values-min: map-get($ibm-grid, $breakpoint-min);
					$a:1;
					@while $a <= map-get($values2, 'columns') {

						.ibm-col-#{$breakpoint2}-#{$a} {

							$width: map-get($values, 'breakpoint');
							@if map-has-key($values, 'min-width') {
								$width: map-get($values, 'min-width');
							}
							$padding: get-padding($values, 1);
							
							$subtractor: $padding * map-get($values, 'margin') * 2;
							@if $subtractor > 0 {
								width: calc( (100vw - #{$subtractor}) * #{$a / map-get($values2, 'columns')} );
							} @else {
								width: calc( 100vw * #{$a / map-get($values2, 'columns')});
							}

							@if $breakpoint2 == $breakpoint {
								// padding: map-get($values-max, 'padding');
								max-width: #{(map-get($values-max, 'breakpoint') - map-get($values-max, 'padding') *2 ) / map-get($values2, 'columns') * $a };
								min-width: map-get($values-min, 'min-width') / map-get($values2, 'columns') * $a;
							}
						}

						.ibm-height-#{$breakpoint2}-#{$a} {

							$padding: get-padding($values, 1);
							$subtractor: $padding * map-get($values, 'margin') * 2;
							@if $subtractor > 0 {
								min-height: calc( (100vw - #{$subtractor}) * #{$a / map-get($values2, 'columns')} );
							} @else {
								min-height: calc( 100vw * #{$a / map-get($values2, 'columns')});
							}
						}

						@if map-get($values, 'margin') > 0 {
							$padding: get-padding($values, 1);
							.ibm-col-#{$breakpoint2}-#{$a}.ibm-col-bleed {
								max-width: #{map-get($values-max, 'breakpoint') / map-get($values2, 'columns') * $a };
								width: calc( 100vw / #{map-get($values2, 'columns')} * #{$a} );
							}
							.ibm-col-#{$breakpoint2}-#{$a}.ibm-col-bleed-left,
							.ibm-col-#{$breakpoint2}-#{$a}.ibm-col-bleed-right {
								max-width: calc(#{(map-get($values-max, 'breakpoint') - map-get($values-max, 'padding') *2 ) / map-get($values2, 'columns') * $a }  + #{map-get($values-max, 'padding')} );
								width: calc( (100vw - (#{$padding}) * #{map-get($values, 'margin')} * 2) / #{map-get($values2, 'columns')} * #{$a} + #{$padding});
							}
						}
						$a: $a + 1;
					}
				}
			}
		}
	}
}

@each $breakpoint, $values in $ibm-grid {
	
	@media (min-width:#{map-get($values, 'breakpoint')}) {

		@each $breakpoint2, $values2 in $ibm-grid {

			@if map-get($values2, 'breakpoint') >= map-get($values, 'breakpoint') {

				@if $breakpoint2 == $breakpoint-max {
					@media (min-width:map-get($values2, 'breakpoint')) {
						.ibm-col-#{$breakpoint}-0-only {
							display:none;
						}
					}
				} @else {
					@media (min-width:map-get($values2, 'breakpoint')) and (max-width:#{map-get(map-get($ibm-grid, map-get($values2, 'next')), 'breakpoint') - 1px}) {
						.ibm-col-#{$breakpoint}-0-only {
							display:none;
						}
					}
				}
			}
		}
	}
}
