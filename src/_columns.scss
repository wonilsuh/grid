/*-----------------------------------------------------
 *	columns
 */

$prev-padding:0;
$prev-breakpoint:null;
$prev-values:null;
@each $breakpoint, $values in $ibm-grid {
	$next-values: map-get($ibm-grid, map-get($values, 'next'));
	
	@if $breakpoint != $breakpoint-max {

		@media (min-width:#{map-get($values, 'breakpoint')}) {

			.ibm-col-#{$breakpoint}-0,
			.ibm-col-hide-#{$breakpoint} {
				display: none;
			}
			@if $prev-breakpoint != null {
				[class*="ibm-col-#{$prev-breakpoint}-"].ibm-col-hide-#{$breakpoint} {
					display: none;
				}
			}

			@each $breakpoint2, $values2 in $ibm-grid {

				@if map-get($values2, 'breakpoint') <= map-get($values, 'breakpoint') {

					@each $breakpoint3, $values3 in $ibm-grid {

						@if map-get($values3, 'breakpoint') > map-get($values2, 'breakpoint')
							and map-get($values3, 'breakpoint') == map-get($values, 'breakpoint') {

							[class*="ibm-col-#{$breakpoint3}-"].ibm-col-#{$breakpoint2}-0,
							[class*="ibm-col-#{$breakpoint3}-"].ibm-col-hide-#{$breakpoint2} {
								display: initial; 

								&.ibm-col-group {
									display: flex;
								}
							}
						}
					}

					$values-max: map-get($ibm-grid, $breakpoint-max);
					$values-min: map-get($ibm-grid, $breakpoint-min);
					$a:1;
					@while $a <= map-get($values2, 'columns') {

						.ibm-col-#{$breakpoint2}-#{$a} {

							$width: map-get($values, 'breakpoint');
							@if map-has-key($values, 'min-width') {
								$width: map-get($values, 'min-width');
							}
							$padding: get-padding($values, 1);
							
							$subtractor: $padding * map-get($values, 'margin') * 2;
							@if $subtractor > 0 {
								width: calc( (100vw - #{$subtractor}) * #{$a / map-get($values2, 'columns')} );
							} @else {
								width: calc( 100vw * #{$a / map-get($values2, 'columns')});
							}

							@if $breakpoint2 == $breakpoint {
								max-width: #{(map-get($values-max, 'breakpoint') - map-get($values-max, 'padding') *2 ) / map-get($values2, 'columns') * $a };
								min-width: map-get($values-min, 'min-width') / map-get($values2, 'columns') * $a;
							}
						}

						@if map-get($values, 'margin') > 0 {
							$padding: get-padding($values, 1);
							.ibm-col-#{$breakpoint2}-#{$a}.ibm-col-bleed {
								max-width: #{map-get($values-max, 'breakpoint') / map-get($values2, 'columns') * $a };
								width: calc( 100vw / #{map-get($values2, 'columns')} * #{$a} );
							}
							.ibm-col-#{$breakpoint2}-#{$a}.ibm-col-bleed-left,
							.ibm-col-#{$breakpoint2}-#{$a}.ibm-col-bleed-right {
								max-width: calc(#{(map-get($values-max, 'breakpoint') - map-get($values-max, 'padding') *2 ) / map-get($values2, 'columns') * $a }  + #{map-get($values-max, 'padding')} );
								width: calc( (100vw - (#{$padding}) * #{map-get($values, 'margin')} * 2) / #{map-get($values2, 'columns')} * #{$a} + #{$padding});
							}
						}
						$a: $a + 1;
					}
				}
			}
		}
	}

	@if "deprecating" == null and $breakpoint != $breakpoint-max{
		/* Onlies */
		@media (min-width:map-get($values, 'breakpoint')) and (max-width:#{map-get($next-values, 'breakpoint') - 1px}) {
			.ibm-col-#{$breakpoint}-0-only,
			.ibm-col-hide-#{$breakpoint}-only {
				display:none;
			}
		}
	}

	$prev-breakpoint:$breakpoint;
	$prev-values:$values;
}
