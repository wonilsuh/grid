/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function get-padding($values, $multiplier, $is-fixed: true) {
	@if multiplier == null {
		$multiplier:1;
	}

	$breakpoint: map-get($values, 'breakpoint');
	@if map-has-key($values, 'min-width') {
		$breakpoint:map-get($values, 'min-width');
	}
	$padding: calc( #{strip-unit( map-get($values, 'padding') )} / #{strip-unit( $breakpoint )} * #{$multiplier * 100vw} );
	@if map-get($values, 'breakpoint') == map-get(map-get($ibm-grid, $breakpoint-max), 'breakpoint') {
		$padding: map-get($values, 'padding') * $multiplier;
	}

	@if $is-fixed == true {
		$padding: map-get($values, 'padding') * $multiplier;
	}
	@return $padding;
}

// ----
// Sass (v3.3.14)
// Compass (v1.0.0.rc.1)
// ----

// Deep set function to set a value in nested maps
// ----------
// @param [map] $map: map
// @param [list] $keys: list of keys to reach
// @param [literal] $value: value to assign
// ----------
// @return [map]

@function map-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;
  
  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == map {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }
  
  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }
  
  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @warn "Key `#{$key}` doesn't exist at current level in map.";
      @return false;
    }
    $maps: append($maps, $current-get);
  }
  
  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }
  
  // Return result
  @return $result;
}