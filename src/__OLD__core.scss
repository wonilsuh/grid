
// cols
.ibm,
.ibm-col-group {
  display: flex;
  flex-wrap: wrap;

  > * {
    width: 100vw;
  }
}

.ibm > *,
.ibm-col-group > *,
[class*="ibm-padding"] {
  box-sizing: border-box;
  
  > *:first-child {
    margin-top: 0;
  }

  > *:last-child {
    margin-bottom: 0;
  }
}

.ibm > *,
.ibm-col-group > * {
  width: 100%;
}

.ibm .ibm-col-group,
.ibm .ibm-col-full {
  padding: 0;
  position: relative;
}

.ibm-no-padding{
  padding:0;
}
@each $breakpoint, $values in $ibm-grid {
  
  /*-----------------------------------------------------
   * padding for #{$breakpoint} 
   */
  @media (min-width:map-get($values, 'breakpoint')) {

    /* -no-padding */
    .ibm-no-padding-#{$breakpoint}{
      padding:0;
    }

    /* -padding */
    $classes: (unquote(".ibm-padding-#{$breakpoint}"));
    @if index($padding-breakpoints, $breakpoint) != null {
      $classes: append($classes, unquote(".ibm > *"), 'comma');
      $classes: append($classes, unquote(".ibm-col-group > *"), 'comma');
      $classes: append($classes, unquote(".ibm-padding"), 'comma');
    }
    #{$classes} {
      padding: map-get($values, 'unit') * map-get($values, 'padding');
    }
    
    /* -padding-horizontal- */
    $classes: (
      unquote(".ibm-padding-horizontal-#{$breakpoint}"),
      unquote(".ibm-col-full.ibm-padding-horizontal-#{$breakpoint}"),
      unquote("ibm-col-group.ibm-padding-horizontal-#{$breakpoint}")
    );
    @if index($padding-breakpoints, $breakpoint) != null {
      $classes: append($classes, unquote(".ibm-padding-horizontal"), 'comma');
      $classes: append($classes, unquote(".ibm-col-full.ibm-padding-horizontal"), 'comma');
      $classes: append($classes, unquote(".ibm-col-group.ibm-padding-horizontal"), 'comma');
    }
    #{$classes} {
      padding-left: map-get($values, 'unit') * map-get($values, 'padding');
      padding-right: map-get($values, 'unit') * map-get($values, 'padding');
    }

    /* -padding-vertical- */
     $classes: (
      unquote(".ibm-padding-vertical-#{$breakpoint}"),
      unquote(".ibm-col-full.ibm-padding-vertical-#{$breakpoint}")
    );
    @if index($padding-breakpoints, $breakpoint) != null {
      $classes: append($classes, unquote(".ibm-padding-vertical"), 'comma');
      $classes: append($classes, unquote(".ibm-col-full.ibm-padding-vertical"), 'comma');
    }
    #{$classes} {
      padding-bottom: map-get($values, 'unit') * map-get($values, 'padding');
      padding-top: map-get($values, 'unit') * map-get($values, 'padding');
    }
  }
}

@each $breakpoint, $values in $ibm-grid {
  
  @if $breakpoint != 'max'{

    /* BEGIN: #{$breakpoint} */
    /* -0 */
    @if map-get($values, columns) {
      @if map-get($values, breakpoint) != 0px {
        @media (min-width: map-get($values, breakpoint)) {
          .ibm-col-#{$breakpoint}-0 {
            display: none;
          }
        }
      } @else {
        .ibm-col-#{$breakpoint}-0 {
          display: none;
        }
      }

      @media (min-width:map-get($values, 'breakpoint')) and (max-width:#{map-get(map-get($ibm-grid, map-get($values, 'next')), 'breakpoint') - 1px}){
        .ibm-col-#{$breakpoint}-0-only {
          display:none;
        }
      }

      @each $breakpoint2, $value2 in $ibm-grid {

        @media (min-width: map-get($value2, 'breakpoint')){

          @if map-get($value2, 'breakpoint') > map-get($values, 'breakpoint'){
            [class*="ibm-col-#{$breakpoint2}-"].ibm-col-#{$breakpoint}-0 {
              display: initial; 

              &.ibm-col-group {
                display: flex;
              }
            }
          }

        }
      }
    }
    /* columns */
    @media (min-width: map-get($values, breakpoint)) {
      $a: 1;
      @while $a <= map-get($values, columns) {
        .ibm-col-#{$breakpoint}-#{$a} {
          @if map-get($values, 'unit') == $unit64 {
            width: 100vw / map-get($values, columns) * $a;
          } @else {
            width: (100vw - map-get($values, 'unit') * 2) / map-get($values, columns) * $a;
          }
          max-width: (map-get(map-get($ibm-grid, max), breakpoint) - map-get(map-get($ibm-grid, max), unit) * 2) / map-get($values, columns) * $a;
        }
        $a: $a + 1;
      }
    }
    // now 64 based columns should switch to 66 based at $col-64-66-breakpoint
    @if(map-get($values, 'unit') == $unit64){
      @media (min-width: map-get(map-get($ibm-grid, $col-64-66-breakpoint), breakpoint)) {
        $a: 1;
        @while $a <= map-get($values, columns) {
          .ibm-col-#{$breakpoint}-#{$a} {
            width: (100vw - (100vw / 66) * 2)/ map-get($values, columns) * $a;
          }
          $a: $a + 1;
        }
      }
    }
  /* END: #{$breakpoint} */
  }
}
