html, body {
  margin: 0;
  overflow-x: hidden;
}

/*-----------------------------------------------------
 *  Container
 */
.ibm {
  box-sizing: border-box;
  max-width: map-get(map-get($ibm-grid, $breakpoint-max), breakpoint);
  min-width: map-get(map-get($ibm-grid, $breakpoint-min), 'min-width');
  width: 100vw;

  /* page margin */
  @each $breakpoint, $values in $ibm-grid {
    @if map-get($values, 'margin') > 0 {
      @media (min-width: map-get($values, 'breakpoint')) {
        @if map-get($values, 'fixed-padding') == true{
          width: map-get($values, 'breakpoint');
          padding: 0 map-get($values, 'padding');
        } @else {
          // width: map-get($values, 'breakpoint');
          padding: 0 calc(#{strip-unit(map-get($values, 'padding'))} / #{strip-unit(map-get($values, 'breakpoint'))} * 100vw;
        }
      }
    }
  }
}

/*-----------------------------------------------------
 *  ibm-col-group
 */
.ibm,
.ibm-col-group {
  display: flex;
  flex-wrap: wrap;

  > * {
    width: 100vw;
  }
}

.ibm > *,
.ibm-col-group > *,
[class*="ibm-padding"] {
  box-sizing: border-box;

  > *:first-child {
    margin-top: 0;
  }

  > *:last-child {
    margin-bottom: 0;
  }
}

.ibm > *,
.ibm-col-group > * {
  width: 100%;
  padding: #{map-get(map-get($ibm-grid, $breakpoint-min), 'padding')};

  @each $breakpoint, $values in $ibm-grid {

    $width: map-get($values, 'breakpoint');
    @if map-has-key($values, 'min-width') == true {
      $width: map-get($values, 'min-width');
    }
    @media (min-width:#{$width}) {
      & {
        padding: calc(#{strip-unit(map-get($values, 'padding'))} / #{strip-unit($width)} * 100vw;
      }
    }
  }
}

.ibm .ibm-col-group,
.ibm .ibm-col-full {
  padding: 0;
  position: relative;
}